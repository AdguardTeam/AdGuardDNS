// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        v6.32.0
// source: dns.proto

package backendpb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DeviceType int32

const (
	DeviceType_INVALID      DeviceType = 0
	DeviceType_WINDOWS      DeviceType = 1
	DeviceType_ANDROID      DeviceType = 2
	DeviceType_MAC          DeviceType = 3
	DeviceType_IOS          DeviceType = 4
	DeviceType_LINUX        DeviceType = 5
	DeviceType_ROUTER       DeviceType = 6
	DeviceType_SMART_TV     DeviceType = 7
	DeviceType_GAME_CONSOLE DeviceType = 8
	DeviceType_OTHER        DeviceType = 9
)

// Enum value maps for DeviceType.
var (
	DeviceType_name = map[int32]string{
		0: "INVALID",
		1: "WINDOWS",
		2: "ANDROID",
		3: "MAC",
		4: "IOS",
		5: "LINUX",
		6: "ROUTER",
		7: "SMART_TV",
		8: "GAME_CONSOLE",
		9: "OTHER",
	}
	DeviceType_value = map[string]int32{
		"INVALID":      0,
		"WINDOWS":      1,
		"ANDROID":      2,
		"MAC":          3,
		"IOS":          4,
		"LINUX":        5,
		"ROUTER":       6,
		"SMART_TV":     7,
		"GAME_CONSOLE": 8,
		"OTHER":        9,
	}
)

func (x DeviceType) Enum() *DeviceType {
	p := new(DeviceType)
	*p = x
	return p
}

func (x DeviceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeviceType) Descriptor() protoreflect.EnumDescriptor {
	return file_dns_proto_enumTypes[0].Descriptor()
}

func (DeviceType) Type() protoreflect.EnumType {
	return &file_dns_proto_enumTypes[0]
}

func (x DeviceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeviceType.Descriptor instead.
func (DeviceType) EnumDescriptor() ([]byte, []int) {
	return file_dns_proto_rawDescGZIP(), []int{0}
}

type RateLimitSettingsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RateLimitSettingsRequest) Reset() {
	*x = RateLimitSettingsRequest{}
	mi := &file_dns_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RateLimitSettingsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RateLimitSettingsRequest) ProtoMessage() {}

func (x *RateLimitSettingsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dns_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RateLimitSettingsRequest.ProtoReflect.Descriptor instead.
func (*RateLimitSettingsRequest) Descriptor() ([]byte, []int) {
	return file_dns_proto_rawDescGZIP(), []int{0}
}

type RateLimitSettingsResponse struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	AllowedSubnets []*CidrRange           `protobuf:"bytes,1,rep,name=allowed_subnets,json=allowedSubnets,proto3" json:"allowed_subnets,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *RateLimitSettingsResponse) Reset() {
	*x = RateLimitSettingsResponse{}
	mi := &file_dns_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RateLimitSettingsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RateLimitSettingsResponse) ProtoMessage() {}

func (x *RateLimitSettingsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dns_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RateLimitSettingsResponse.ProtoReflect.Descriptor instead.
func (*RateLimitSettingsResponse) Descriptor() ([]byte, []int) {
	return file_dns_proto_rawDescGZIP(), []int{1}
}

func (x *RateLimitSettingsResponse) GetAllowedSubnets() []*CidrRange {
	if x != nil {
		return x.AllowedSubnets
	}
	return nil
}

type GlobalAccessSettingsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GlobalAccessSettingsRequest) Reset() {
	*x = GlobalAccessSettingsRequest{}
	mi := &file_dns_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GlobalAccessSettingsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GlobalAccessSettingsRequest) ProtoMessage() {}

func (x *GlobalAccessSettingsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dns_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GlobalAccessSettingsRequest.ProtoReflect.Descriptor instead.
func (*GlobalAccessSettingsRequest) Descriptor() ([]byte, []int) {
	return file_dns_proto_rawDescGZIP(), []int{2}
}

type GlobalAccessSettingsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Standard      *AccessSettings        `protobuf:"bytes,1,opt,name=standard,proto3" json:"standard,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GlobalAccessSettingsResponse) Reset() {
	*x = GlobalAccessSettingsResponse{}
	mi := &file_dns_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GlobalAccessSettingsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GlobalAccessSettingsResponse) ProtoMessage() {}

func (x *GlobalAccessSettingsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dns_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GlobalAccessSettingsResponse.ProtoReflect.Descriptor instead.
func (*GlobalAccessSettingsResponse) Descriptor() ([]byte, []int) {
	return file_dns_proto_rawDescGZIP(), []int{3}
}

func (x *GlobalAccessSettingsResponse) GetStandard() *AccessSettings {
	if x != nil {
		return x.Standard
	}
	return nil
}

type DNSProfilesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SyncTime      *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=sync_time,json=syncTime,proto3" json:"sync_time,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DNSProfilesRequest) Reset() {
	*x = DNSProfilesRequest{}
	mi := &file_dns_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DNSProfilesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DNSProfilesRequest) ProtoMessage() {}

func (x *DNSProfilesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dns_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DNSProfilesRequest.ProtoReflect.Descriptor instead.
func (*DNSProfilesRequest) Descriptor() ([]byte, []int) {
	return file_dns_proto_rawDescGZIP(), []int{4}
}

func (x *DNSProfilesRequest) GetSyncTime() *timestamppb.Timestamp {
	if x != nil {
		return x.SyncTime
	}
	return nil
}

type DNSProfile struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	DnsId            string                 `protobuf:"bytes,1,opt,name=dns_id,json=dnsId,proto3" json:"dns_id,omitempty"`
	FilteringEnabled bool                   `protobuf:"varint,2,opt,name=filtering_enabled,json=filteringEnabled,proto3" json:"filtering_enabled,omitempty"`
	QueryLogEnabled  bool                   `protobuf:"varint,3,opt,name=query_log_enabled,json=queryLogEnabled,proto3" json:"query_log_enabled,omitempty"`
	Deleted          bool                   `protobuf:"varint,4,opt,name=deleted,proto3" json:"deleted,omitempty"`
	SafeBrowsing     *SafeBrowsingSettings  `protobuf:"bytes,5,opt,name=safe_browsing,json=safeBrowsing,proto3" json:"safe_browsing,omitempty"`
	Parental         *ParentalSettings      `protobuf:"bytes,6,opt,name=parental,proto3" json:"parental,omitempty"`
	RuleLists        *RuleListsSettings     `protobuf:"bytes,7,opt,name=rule_lists,json=ruleLists,proto3" json:"rule_lists,omitempty"`
	// Field devices contains the COMPLETE list of all devices in the profile.
	// Field device_changes contains only the list of changes that have happened
	// to the profile's devices since sync_time.
	//
	// devices and device_changes MUST NOT be set at the same time, but they MAY
	// both be empty.
	//
	// device_changes MUST NOT contain multiple changes for the same device.
	Devices             []*DeviceSettings    `protobuf:"bytes,8,rep,name=devices,proto3" json:"devices,omitempty"`
	CustomRules         []string             `protobuf:"bytes,9,rep,name=custom_rules,json=customRules,proto3" json:"custom_rules,omitempty"`
	FilteredResponseTtl *durationpb.Duration `protobuf:"bytes,10,opt,name=filtered_response_ttl,json=filteredResponseTtl,proto3" json:"filtered_response_ttl,omitempty"`
	BlockPrivateRelay   bool                 `protobuf:"varint,11,opt,name=block_private_relay,json=blockPrivateRelay,proto3" json:"block_private_relay,omitempty"`
	BlockFirefoxCanary  bool                 `protobuf:"varint,12,opt,name=block_firefox_canary,json=blockFirefoxCanary,proto3" json:"block_firefox_canary,omitempty"`
	// Types that are valid to be assigned to BlockingMode:
	//
	//	*DNSProfile_BlockingModeCustomIp
	//	*DNSProfile_BlockingModeNxdomain
	//	*DNSProfile_BlockingModeNullIp
	//	*DNSProfile_BlockingModeRefused
	BlockingMode                  isDNSProfile_BlockingMode `protobuf_oneof:"blocking_mode"`
	IpLogEnabled                  bool                      `protobuf:"varint,17,opt,name=ip_log_enabled,json=ipLogEnabled,proto3" json:"ip_log_enabled,omitempty"`
	Access                        *AccessSettings           `protobuf:"bytes,18,opt,name=access,proto3" json:"access,omitempty"`
	AutoDevicesEnabled            bool                      `protobuf:"varint,19,opt,name=auto_devices_enabled,json=autoDevicesEnabled,proto3" json:"auto_devices_enabled,omitempty"`
	RateLimit                     *RateLimitSettings        `protobuf:"bytes,20,opt,name=rate_limit,json=rateLimit,proto3" json:"rate_limit,omitempty"`
	BlockChromePrefetch           bool                      `protobuf:"varint,21,opt,name=block_chrome_prefetch,json=blockChromePrefetch,proto3" json:"block_chrome_prefetch,omitempty"`
	CustomDomain                  *CustomDomainSettings     `protobuf:"bytes,22,opt,name=custom_domain,json=customDomain,proto3" json:"custom_domain,omitempty"`
	AccountId                     string                    `protobuf:"bytes,23,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	DeviceChanges                 []*DeviceSettingsChange   `protobuf:"bytes,24,rep,name=device_changes,json=deviceChanges,proto3" json:"device_changes,omitempty"`
	StandardAccessSettingsEnabled bool                      `protobuf:"varint,25,opt,name=standard_access_settings_enabled,json=standardAccessSettingsEnabled,proto3" json:"standard_access_settings_enabled,omitempty"`
	unknownFields                 protoimpl.UnknownFields
	sizeCache                     protoimpl.SizeCache
}

func (x *DNSProfile) Reset() {
	*x = DNSProfile{}
	mi := &file_dns_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DNSProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DNSProfile) ProtoMessage() {}

func (x *DNSProfile) ProtoReflect() protoreflect.Message {
	mi := &file_dns_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DNSProfile.ProtoReflect.Descriptor instead.
func (*DNSProfile) Descriptor() ([]byte, []int) {
	return file_dns_proto_rawDescGZIP(), []int{5}
}

func (x *DNSProfile) GetDnsId() string {
	if x != nil {
		return x.DnsId
	}
	return ""
}

func (x *DNSProfile) GetFilteringEnabled() bool {
	if x != nil {
		return x.FilteringEnabled
	}
	return false
}

func (x *DNSProfile) GetQueryLogEnabled() bool {
	if x != nil {
		return x.QueryLogEnabled
	}
	return false
}

func (x *DNSProfile) GetDeleted() bool {
	if x != nil {
		return x.Deleted
	}
	return false
}

func (x *DNSProfile) GetSafeBrowsing() *SafeBrowsingSettings {
	if x != nil {
		return x.SafeBrowsing
	}
	return nil
}

func (x *DNSProfile) GetParental() *ParentalSettings {
	if x != nil {
		return x.Parental
	}
	return nil
}

func (x *DNSProfile) GetRuleLists() *RuleListsSettings {
	if x != nil {
		return x.RuleLists
	}
	return nil
}

func (x *DNSProfile) GetDevices() []*DeviceSettings {
	if x != nil {
		return x.Devices
	}
	return nil
}

func (x *DNSProfile) GetCustomRules() []string {
	if x != nil {
		return x.CustomRules
	}
	return nil
}

func (x *DNSProfile) GetFilteredResponseTtl() *durationpb.Duration {
	if x != nil {
		return x.FilteredResponseTtl
	}
	return nil
}

func (x *DNSProfile) GetBlockPrivateRelay() bool {
	if x != nil {
		return x.BlockPrivateRelay
	}
	return false
}

func (x *DNSProfile) GetBlockFirefoxCanary() bool {
	if x != nil {
		return x.BlockFirefoxCanary
	}
	return false
}

func (x *DNSProfile) GetBlockingMode() isDNSProfile_BlockingMode {
	if x != nil {
		return x.BlockingMode
	}
	return nil
}

func (x *DNSProfile) GetBlockingModeCustomIp() *BlockingModeCustomIP {
	if x != nil {
		if x, ok := x.BlockingMode.(*DNSProfile_BlockingModeCustomIp); ok {
			return x.BlockingModeCustomIp
		}
	}
	return nil
}

func (x *DNSProfile) GetBlockingModeNxdomain() *BlockingModeNXDOMAIN {
	if x != nil {
		if x, ok := x.BlockingMode.(*DNSProfile_BlockingModeNxdomain); ok {
			return x.BlockingModeNxdomain
		}
	}
	return nil
}

func (x *DNSProfile) GetBlockingModeNullIp() *BlockingModeNullIP {
	if x != nil {
		if x, ok := x.BlockingMode.(*DNSProfile_BlockingModeNullIp); ok {
			return x.BlockingModeNullIp
		}
	}
	return nil
}

func (x *DNSProfile) GetBlockingModeRefused() *BlockingModeREFUSED {
	if x != nil {
		if x, ok := x.BlockingMode.(*DNSProfile_BlockingModeRefused); ok {
			return x.BlockingModeRefused
		}
	}
	return nil
}

func (x *DNSProfile) GetIpLogEnabled() bool {
	if x != nil {
		return x.IpLogEnabled
	}
	return false
}

func (x *DNSProfile) GetAccess() *AccessSettings {
	if x != nil {
		return x.Access
	}
	return nil
}

func (x *DNSProfile) GetAutoDevicesEnabled() bool {
	if x != nil {
		return x.AutoDevicesEnabled
	}
	return false
}

func (x *DNSProfile) GetRateLimit() *RateLimitSettings {
	if x != nil {
		return x.RateLimit
	}
	return nil
}

func (x *DNSProfile) GetBlockChromePrefetch() bool {
	if x != nil {
		return x.BlockChromePrefetch
	}
	return false
}

func (x *DNSProfile) GetCustomDomain() *CustomDomainSettings {
	if x != nil {
		return x.CustomDomain
	}
	return nil
}

func (x *DNSProfile) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *DNSProfile) GetDeviceChanges() []*DeviceSettingsChange {
	if x != nil {
		return x.DeviceChanges
	}
	return nil
}

func (x *DNSProfile) GetStandardAccessSettingsEnabled() bool {
	if x != nil {
		return x.StandardAccessSettingsEnabled
	}
	return false
}

type isDNSProfile_BlockingMode interface {
	isDNSProfile_BlockingMode()
}

type DNSProfile_BlockingModeCustomIp struct {
	BlockingModeCustomIp *BlockingModeCustomIP `protobuf:"bytes,13,opt,name=blocking_mode_custom_ip,json=blockingModeCustomIp,proto3,oneof"`
}

type DNSProfile_BlockingModeNxdomain struct {
	BlockingModeNxdomain *BlockingModeNXDOMAIN `protobuf:"bytes,14,opt,name=blocking_mode_nxdomain,json=blockingModeNxdomain,proto3,oneof"`
}

type DNSProfile_BlockingModeNullIp struct {
	BlockingModeNullIp *BlockingModeNullIP `protobuf:"bytes,15,opt,name=blocking_mode_null_ip,json=blockingModeNullIp,proto3,oneof"`
}

type DNSProfile_BlockingModeRefused struct {
	BlockingModeRefused *BlockingModeREFUSED `protobuf:"bytes,16,opt,name=blocking_mode_refused,json=blockingModeRefused,proto3,oneof"`
}

func (*DNSProfile_BlockingModeCustomIp) isDNSProfile_BlockingMode() {}

func (*DNSProfile_BlockingModeNxdomain) isDNSProfile_BlockingMode() {}

func (*DNSProfile_BlockingModeNullIp) isDNSProfile_BlockingMode() {}

func (*DNSProfile_BlockingModeRefused) isDNSProfile_BlockingMode() {}

type DeviceSettingsChange struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Change:
	//
	//	*DeviceSettingsChange_Deleted_
	//	*DeviceSettingsChange_Upserted_
	Change        isDeviceSettingsChange_Change `protobuf_oneof:"change"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeviceSettingsChange) Reset() {
	*x = DeviceSettingsChange{}
	mi := &file_dns_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeviceSettingsChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceSettingsChange) ProtoMessage() {}

func (x *DeviceSettingsChange) ProtoReflect() protoreflect.Message {
	mi := &file_dns_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceSettingsChange.ProtoReflect.Descriptor instead.
func (*DeviceSettingsChange) Descriptor() ([]byte, []int) {
	return file_dns_proto_rawDescGZIP(), []int{6}
}

func (x *DeviceSettingsChange) GetChange() isDeviceSettingsChange_Change {
	if x != nil {
		return x.Change
	}
	return nil
}

func (x *DeviceSettingsChange) GetDeleted() *DeviceSettingsChange_Deleted {
	if x != nil {
		if x, ok := x.Change.(*DeviceSettingsChange_Deleted_); ok {
			return x.Deleted
		}
	}
	return nil
}

func (x *DeviceSettingsChange) GetUpserted() *DeviceSettingsChange_Upserted {
	if x != nil {
		if x, ok := x.Change.(*DeviceSettingsChange_Upserted_); ok {
			return x.Upserted
		}
	}
	return nil
}

type isDeviceSettingsChange_Change interface {
	isDeviceSettingsChange_Change()
}

type DeviceSettingsChange_Deleted_ struct {
	Deleted *DeviceSettingsChange_Deleted `protobuf:"bytes,1,opt,name=deleted,proto3,oneof"`
}

type DeviceSettingsChange_Upserted_ struct {
	Upserted *DeviceSettingsChange_Upserted `protobuf:"bytes,2,opt,name=upserted,proto3,oneof"`
}

func (*DeviceSettingsChange_Deleted_) isDeviceSettingsChange_Change() {}

func (*DeviceSettingsChange_Upserted_) isDeviceSettingsChange_Change() {}

type CustomDomainSettings struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Domains       []*CustomDomain        `protobuf:"bytes,1,rep,name=domains,proto3" json:"domains,omitempty"`
	Enabled       bool                   `protobuf:"varint,2,opt,name=enabled,proto3" json:"enabled,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CustomDomainSettings) Reset() {
	*x = CustomDomainSettings{}
	mi := &file_dns_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CustomDomainSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomDomainSettings) ProtoMessage() {}

func (x *CustomDomainSettings) ProtoReflect() protoreflect.Message {
	mi := &file_dns_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomDomainSettings.ProtoReflect.Descriptor instead.
func (*CustomDomainSettings) Descriptor() ([]byte, []int) {
	return file_dns_proto_rawDescGZIP(), []int{7}
}

func (x *CustomDomainSettings) GetDomains() []*CustomDomain {
	if x != nil {
		return x.Domains
	}
	return nil
}

func (x *CustomDomainSettings) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

// *
// Custom domain.
//
// <p>Field <code>domains</code> must not be empty</p>
type CustomDomain struct {
	state   protoimpl.MessageState `protogen:"open.v1"`
	Domains []string               `protobuf:"bytes,1,rep,name=domains,proto3" json:"domains,omitempty"`
	// Types that are valid to be assigned to State:
	//
	//	*CustomDomain_Pending_
	//	*CustomDomain_Current_
	State         isCustomDomain_State `protobuf_oneof:"state"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CustomDomain) Reset() {
	*x = CustomDomain{}
	mi := &file_dns_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CustomDomain) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomDomain) ProtoMessage() {}

func (x *CustomDomain) ProtoReflect() protoreflect.Message {
	mi := &file_dns_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomDomain.ProtoReflect.Descriptor instead.
func (*CustomDomain) Descriptor() ([]byte, []int) {
	return file_dns_proto_rawDescGZIP(), []int{8}
}

func (x *CustomDomain) GetDomains() []string {
	if x != nil {
		return x.Domains
	}
	return nil
}

func (x *CustomDomain) GetState() isCustomDomain_State {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *CustomDomain) GetPending() *CustomDomain_Pending {
	if x != nil {
		if x, ok := x.State.(*CustomDomain_Pending_); ok {
			return x.Pending
		}
	}
	return nil
}

func (x *CustomDomain) GetCurrent() *CustomDomain_Current {
	if x != nil {
		if x, ok := x.State.(*CustomDomain_Current_); ok {
			return x.Current
		}
	}
	return nil
}

type isCustomDomain_State interface {
	isCustomDomain_State()
}

type CustomDomain_Pending_ struct {
	Pending *CustomDomain_Pending `protobuf:"bytes,2,opt,name=pending,proto3,oneof"`
}

type CustomDomain_Current_ struct {
	Current *CustomDomain_Current `protobuf:"bytes,3,opt,name=current,proto3,oneof"`
}

func (*CustomDomain_Pending_) isCustomDomain_State() {}

func (*CustomDomain_Current_) isCustomDomain_State() {}

type SafeBrowsingSettings struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	Enabled               bool                   `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	BlockDangerousDomains bool                   `protobuf:"varint,2,opt,name=block_dangerous_domains,json=blockDangerousDomains,proto3" json:"block_dangerous_domains,omitempty"`
	BlockNrd              bool                   `protobuf:"varint,3,opt,name=block_nrd,json=blockNrd,proto3" json:"block_nrd,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *SafeBrowsingSettings) Reset() {
	*x = SafeBrowsingSettings{}
	mi := &file_dns_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SafeBrowsingSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SafeBrowsingSettings) ProtoMessage() {}

func (x *SafeBrowsingSettings) ProtoReflect() protoreflect.Message {
	mi := &file_dns_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SafeBrowsingSettings.ProtoReflect.Descriptor instead.
func (*SafeBrowsingSettings) Descriptor() ([]byte, []int) {
	return file_dns_proto_rawDescGZIP(), []int{9}
}

func (x *SafeBrowsingSettings) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *SafeBrowsingSettings) GetBlockDangerousDomains() bool {
	if x != nil {
		return x.BlockDangerousDomains
	}
	return false
}

func (x *SafeBrowsingSettings) GetBlockNrd() bool {
	if x != nil {
		return x.BlockNrd
	}
	return false
}

type DeviceSettings struct {
	state            protoimpl.MessageState  `protogen:"open.v1"`
	Id               string                  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name             string                  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	FilteringEnabled bool                    `protobuf:"varint,3,opt,name=filtering_enabled,json=filteringEnabled,proto3" json:"filtering_enabled,omitempty"`
	LinkedIp         []byte                  `protobuf:"bytes,4,opt,name=linked_ip,json=linkedIp,proto3" json:"linked_ip,omitempty"`
	DedicatedIps     [][]byte                `protobuf:"bytes,5,rep,name=dedicated_ips,json=dedicatedIps,proto3" json:"dedicated_ips,omitempty"`
	Authentication   *AuthenticationSettings `protobuf:"bytes,6,opt,name=authentication,proto3" json:"authentication,omitempty"`
	// Value in lower case. Will be empty for "ordinary" devices and non-empty for "automatically" created devices.
	HumanIdLower  string `protobuf:"bytes,7,opt,name=human_id_lower,json=humanIdLower,proto3" json:"human_id_lower,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeviceSettings) Reset() {
	*x = DeviceSettings{}
	mi := &file_dns_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeviceSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceSettings) ProtoMessage() {}

func (x *DeviceSettings) ProtoReflect() protoreflect.Message {
	mi := &file_dns_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceSettings.ProtoReflect.Descriptor instead.
func (*DeviceSettings) Descriptor() ([]byte, []int) {
	return file_dns_proto_rawDescGZIP(), []int{10}
}

func (x *DeviceSettings) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DeviceSettings) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DeviceSettings) GetFilteringEnabled() bool {
	if x != nil {
		return x.FilteringEnabled
	}
	return false
}

func (x *DeviceSettings) GetLinkedIp() []byte {
	if x != nil {
		return x.LinkedIp
	}
	return nil
}

func (x *DeviceSettings) GetDedicatedIps() [][]byte {
	if x != nil {
		return x.DedicatedIps
	}
	return nil
}

func (x *DeviceSettings) GetAuthentication() *AuthenticationSettings {
	if x != nil {
		return x.Authentication
	}
	return nil
}

func (x *DeviceSettings) GetHumanIdLower() string {
	if x != nil {
		return x.HumanIdLower
	}
	return ""
}

type ParentalSettings struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Enabled           bool                   `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	BlockAdult        bool                   `protobuf:"varint,2,opt,name=block_adult,json=blockAdult,proto3" json:"block_adult,omitempty"`
	GeneralSafeSearch bool                   `protobuf:"varint,3,opt,name=general_safe_search,json=generalSafeSearch,proto3" json:"general_safe_search,omitempty"`
	YoutubeSafeSearch bool                   `protobuf:"varint,4,opt,name=youtube_safe_search,json=youtubeSafeSearch,proto3" json:"youtube_safe_search,omitempty"`
	BlockedServices   []string               `protobuf:"bytes,5,rep,name=blocked_services,json=blockedServices,proto3" json:"blocked_services,omitempty"`
	Schedule          *ScheduleSettings      `protobuf:"bytes,6,opt,name=schedule,proto3" json:"schedule,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *ParentalSettings) Reset() {
	*x = ParentalSettings{}
	mi := &file_dns_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ParentalSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParentalSettings) ProtoMessage() {}

func (x *ParentalSettings) ProtoReflect() protoreflect.Message {
	mi := &file_dns_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParentalSettings.ProtoReflect.Descriptor instead.
func (*ParentalSettings) Descriptor() ([]byte, []int) {
	return file_dns_proto_rawDescGZIP(), []int{11}
}

func (x *ParentalSettings) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *ParentalSettings) GetBlockAdult() bool {
	if x != nil {
		return x.BlockAdult
	}
	return false
}

func (x *ParentalSettings) GetGeneralSafeSearch() bool {
	if x != nil {
		return x.GeneralSafeSearch
	}
	return false
}

func (x *ParentalSettings) GetYoutubeSafeSearch() bool {
	if x != nil {
		return x.YoutubeSafeSearch
	}
	return false
}

func (x *ParentalSettings) GetBlockedServices() []string {
	if x != nil {
		return x.BlockedServices
	}
	return nil
}

func (x *ParentalSettings) GetSchedule() *ScheduleSettings {
	if x != nil {
		return x.Schedule
	}
	return nil
}

type ScheduleSettings struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Tmz           string                 `protobuf:"bytes,1,opt,name=tmz,proto3" json:"tmz,omitempty"`
	WeeklyRange   *WeeklyRange           `protobuf:"bytes,2,opt,name=weekly_range,json=weeklyRange,proto3" json:"weekly_range,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ScheduleSettings) Reset() {
	*x = ScheduleSettings{}
	mi := &file_dns_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ScheduleSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScheduleSettings) ProtoMessage() {}

func (x *ScheduleSettings) ProtoReflect() protoreflect.Message {
	mi := &file_dns_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScheduleSettings.ProtoReflect.Descriptor instead.
func (*ScheduleSettings) Descriptor() ([]byte, []int) {
	return file_dns_proto_rawDescGZIP(), []int{12}
}

func (x *ScheduleSettings) GetTmz() string {
	if x != nil {
		return x.Tmz
	}
	return ""
}

func (x *ScheduleSettings) GetWeeklyRange() *WeeklyRange {
	if x != nil {
		return x.WeeklyRange
	}
	return nil
}

type WeeklyRange struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Mon           *DayRange              `protobuf:"bytes,1,opt,name=mon,proto3" json:"mon,omitempty"`
	Tue           *DayRange              `protobuf:"bytes,2,opt,name=tue,proto3" json:"tue,omitempty"`
	Wed           *DayRange              `protobuf:"bytes,3,opt,name=wed,proto3" json:"wed,omitempty"`
	Thu           *DayRange              `protobuf:"bytes,4,opt,name=thu,proto3" json:"thu,omitempty"`
	Fri           *DayRange              `protobuf:"bytes,5,opt,name=fri,proto3" json:"fri,omitempty"`
	Sat           *DayRange              `protobuf:"bytes,6,opt,name=sat,proto3" json:"sat,omitempty"`
	Sun           *DayRange              `protobuf:"bytes,7,opt,name=sun,proto3" json:"sun,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WeeklyRange) Reset() {
	*x = WeeklyRange{}
	mi := &file_dns_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WeeklyRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WeeklyRange) ProtoMessage() {}

func (x *WeeklyRange) ProtoReflect() protoreflect.Message {
	mi := &file_dns_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WeeklyRange.ProtoReflect.Descriptor instead.
func (*WeeklyRange) Descriptor() ([]byte, []int) {
	return file_dns_proto_rawDescGZIP(), []int{13}
}

func (x *WeeklyRange) GetMon() *DayRange {
	if x != nil {
		return x.Mon
	}
	return nil
}

func (x *WeeklyRange) GetTue() *DayRange {
	if x != nil {
		return x.Tue
	}
	return nil
}

func (x *WeeklyRange) GetWed() *DayRange {
	if x != nil {
		return x.Wed
	}
	return nil
}

func (x *WeeklyRange) GetThu() *DayRange {
	if x != nil {
		return x.Thu
	}
	return nil
}

func (x *WeeklyRange) GetFri() *DayRange {
	if x != nil {
		return x.Fri
	}
	return nil
}

func (x *WeeklyRange) GetSat() *DayRange {
	if x != nil {
		return x.Sat
	}
	return nil
}

func (x *WeeklyRange) GetSun() *DayRange {
	if x != nil {
		return x.Sun
	}
	return nil
}

type DayRange struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Start         *durationpb.Duration   `protobuf:"bytes,1,opt,name=start,proto3" json:"start,omitempty"`
	End           *durationpb.Duration   `protobuf:"bytes,2,opt,name=end,proto3" json:"end,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DayRange) Reset() {
	*x = DayRange{}
	mi := &file_dns_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DayRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DayRange) ProtoMessage() {}

func (x *DayRange) ProtoReflect() protoreflect.Message {
	mi := &file_dns_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DayRange.ProtoReflect.Descriptor instead.
func (*DayRange) Descriptor() ([]byte, []int) {
	return file_dns_proto_rawDescGZIP(), []int{14}
}

func (x *DayRange) GetStart() *durationpb.Duration {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *DayRange) GetEnd() *durationpb.Duration {
	if x != nil {
		return x.End
	}
	return nil
}

type RuleListsSettings struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Enabled       bool                   `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Ids           []string               `protobuf:"bytes,2,rep,name=ids,proto3" json:"ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RuleListsSettings) Reset() {
	*x = RuleListsSettings{}
	mi := &file_dns_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RuleListsSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuleListsSettings) ProtoMessage() {}

func (x *RuleListsSettings) ProtoReflect() protoreflect.Message {
	mi := &file_dns_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuleListsSettings.ProtoReflect.Descriptor instead.
func (*RuleListsSettings) Descriptor() ([]byte, []int) {
	return file_dns_proto_rawDescGZIP(), []int{15}
}

func (x *RuleListsSettings) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *RuleListsSettings) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

type BlockingModeCustomIP struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Ipv4          []byte                 `protobuf:"bytes,1,opt,name=ipv4,proto3" json:"ipv4,omitempty"`
	Ipv6          []byte                 `protobuf:"bytes,2,opt,name=ipv6,proto3" json:"ipv6,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BlockingModeCustomIP) Reset() {
	*x = BlockingModeCustomIP{}
	mi := &file_dns_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BlockingModeCustomIP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockingModeCustomIP) ProtoMessage() {}

func (x *BlockingModeCustomIP) ProtoReflect() protoreflect.Message {
	mi := &file_dns_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockingModeCustomIP.ProtoReflect.Descriptor instead.
func (*BlockingModeCustomIP) Descriptor() ([]byte, []int) {
	return file_dns_proto_rawDescGZIP(), []int{16}
}

func (x *BlockingModeCustomIP) GetIpv4() []byte {
	if x != nil {
		return x.Ipv4
	}
	return nil
}

func (x *BlockingModeCustomIP) GetIpv6() []byte {
	if x != nil {
		return x.Ipv6
	}
	return nil
}

type BlockingModeNXDOMAIN struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BlockingModeNXDOMAIN) Reset() {
	*x = BlockingModeNXDOMAIN{}
	mi := &file_dns_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BlockingModeNXDOMAIN) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockingModeNXDOMAIN) ProtoMessage() {}

func (x *BlockingModeNXDOMAIN) ProtoReflect() protoreflect.Message {
	mi := &file_dns_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockingModeNXDOMAIN.ProtoReflect.Descriptor instead.
func (*BlockingModeNXDOMAIN) Descriptor() ([]byte, []int) {
	return file_dns_proto_rawDescGZIP(), []int{17}
}

type BlockingModeNullIP struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BlockingModeNullIP) Reset() {
	*x = BlockingModeNullIP{}
	mi := &file_dns_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BlockingModeNullIP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockingModeNullIP) ProtoMessage() {}

func (x *BlockingModeNullIP) ProtoReflect() protoreflect.Message {
	mi := &file_dns_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockingModeNullIP.ProtoReflect.Descriptor instead.
func (*BlockingModeNullIP) Descriptor() ([]byte, []int) {
	return file_dns_proto_rawDescGZIP(), []int{18}
}

type BlockingModeREFUSED struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BlockingModeREFUSED) Reset() {
	*x = BlockingModeREFUSED{}
	mi := &file_dns_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BlockingModeREFUSED) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockingModeREFUSED) ProtoMessage() {}

func (x *BlockingModeREFUSED) ProtoReflect() protoreflect.Message {
	mi := &file_dns_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockingModeREFUSED.ProtoReflect.Descriptor instead.
func (*BlockingModeREFUSED) Descriptor() ([]byte, []int) {
	return file_dns_proto_rawDescGZIP(), []int{19}
}

type DeviceBillingStat struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	LastActivityTime *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=last_activity_time,json=lastActivityTime,proto3" json:"last_activity_time,omitempty"`
	DeviceId         string                 `protobuf:"bytes,2,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	ClientCountry    string                 `protobuf:"bytes,3,opt,name=client_country,json=clientCountry,proto3" json:"client_country,omitempty"`
	// Protocol type. Possible values see here: https://bit.adguard.com/projects/DNS/repos/dns-server/browse#ql-properties
	Proto         uint32 `protobuf:"varint,4,opt,name=proto,proto3" json:"proto,omitempty"`
	Asn           uint32 `protobuf:"varint,5,opt,name=asn,proto3" json:"asn,omitempty"`
	Queries       uint32 `protobuf:"varint,6,opt,name=queries,proto3" json:"queries,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeviceBillingStat) Reset() {
	*x = DeviceBillingStat{}
	mi := &file_dns_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeviceBillingStat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceBillingStat) ProtoMessage() {}

func (x *DeviceBillingStat) ProtoReflect() protoreflect.Message {
	mi := &file_dns_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceBillingStat.ProtoReflect.Descriptor instead.
func (*DeviceBillingStat) Descriptor() ([]byte, []int) {
	return file_dns_proto_rawDescGZIP(), []int{20}
}

func (x *DeviceBillingStat) GetLastActivityTime() *timestamppb.Timestamp {
	if x != nil {
		return x.LastActivityTime
	}
	return nil
}

func (x *DeviceBillingStat) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *DeviceBillingStat) GetClientCountry() string {
	if x != nil {
		return x.ClientCountry
	}
	return ""
}

func (x *DeviceBillingStat) GetProto() uint32 {
	if x != nil {
		return x.Proto
	}
	return 0
}

func (x *DeviceBillingStat) GetAsn() uint32 {
	if x != nil {
		return x.Asn
	}
	return 0
}

func (x *DeviceBillingStat) GetQueries() uint32 {
	if x != nil {
		return x.Queries
	}
	return 0
}

type AccessSettings struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	AllowlistCidr        []*CidrRange           `protobuf:"bytes,1,rep,name=allowlist_cidr,json=allowlistCidr,proto3" json:"allowlist_cidr,omitempty"`
	BlocklistCidr        []*CidrRange           `protobuf:"bytes,2,rep,name=blocklist_cidr,json=blocklistCidr,proto3" json:"blocklist_cidr,omitempty"`
	AllowlistAsn         []uint32               `protobuf:"varint,3,rep,packed,name=allowlist_asn,json=allowlistAsn,proto3" json:"allowlist_asn,omitempty"`
	BlocklistAsn         []uint32               `protobuf:"varint,4,rep,packed,name=blocklist_asn,json=blocklistAsn,proto3" json:"blocklist_asn,omitempty"`
	BlocklistDomainRules []string               `protobuf:"bytes,5,rep,name=blocklist_domain_rules,json=blocklistDomainRules,proto3" json:"blocklist_domain_rules,omitempty"`
	Enabled              bool                   `protobuf:"varint,6,opt,name=enabled,proto3" json:"enabled,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *AccessSettings) Reset() {
	*x = AccessSettings{}
	mi := &file_dns_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccessSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessSettings) ProtoMessage() {}

func (x *AccessSettings) ProtoReflect() protoreflect.Message {
	mi := &file_dns_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessSettings.ProtoReflect.Descriptor instead.
func (*AccessSettings) Descriptor() ([]byte, []int) {
	return file_dns_proto_rawDescGZIP(), []int{21}
}

func (x *AccessSettings) GetAllowlistCidr() []*CidrRange {
	if x != nil {
		return x.AllowlistCidr
	}
	return nil
}

func (x *AccessSettings) GetBlocklistCidr() []*CidrRange {
	if x != nil {
		return x.BlocklistCidr
	}
	return nil
}

func (x *AccessSettings) GetAllowlistAsn() []uint32 {
	if x != nil {
		return x.AllowlistAsn
	}
	return nil
}

func (x *AccessSettings) GetBlocklistAsn() []uint32 {
	if x != nil {
		return x.BlocklistAsn
	}
	return nil
}

func (x *AccessSettings) GetBlocklistDomainRules() []string {
	if x != nil {
		return x.BlocklistDomainRules
	}
	return nil
}

func (x *AccessSettings) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

type CidrRange struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Address       []byte                 `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Prefix        uint32                 `protobuf:"varint,2,opt,name=prefix,proto3" json:"prefix,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CidrRange) Reset() {
	*x = CidrRange{}
	mi := &file_dns_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CidrRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CidrRange) ProtoMessage() {}

func (x *CidrRange) ProtoReflect() protoreflect.Message {
	mi := &file_dns_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CidrRange.ProtoReflect.Descriptor instead.
func (*CidrRange) Descriptor() ([]byte, []int) {
	return file_dns_proto_rawDescGZIP(), []int{22}
}

func (x *CidrRange) GetAddress() []byte {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *CidrRange) GetPrefix() uint32 {
	if x != nil {
		return x.Prefix
	}
	return 0
}

type AuthenticationSettings struct {
	state       protoimpl.MessageState `protogen:"open.v1"`
	DohAuthOnly bool                   `protobuf:"varint,1,opt,name=doh_auth_only,json=dohAuthOnly,proto3" json:"doh_auth_only,omitempty"`
	// Types that are valid to be assigned to DohPasswordHash:
	//
	//	*AuthenticationSettings_PasswordHashBcrypt
	DohPasswordHash isAuthenticationSettings_DohPasswordHash `protobuf_oneof:"doh_password_hash"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *AuthenticationSettings) Reset() {
	*x = AuthenticationSettings{}
	mi := &file_dns_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AuthenticationSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthenticationSettings) ProtoMessage() {}

func (x *AuthenticationSettings) ProtoReflect() protoreflect.Message {
	mi := &file_dns_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthenticationSettings.ProtoReflect.Descriptor instead.
func (*AuthenticationSettings) Descriptor() ([]byte, []int) {
	return file_dns_proto_rawDescGZIP(), []int{23}
}

func (x *AuthenticationSettings) GetDohAuthOnly() bool {
	if x != nil {
		return x.DohAuthOnly
	}
	return false
}

func (x *AuthenticationSettings) GetDohPasswordHash() isAuthenticationSettings_DohPasswordHash {
	if x != nil {
		return x.DohPasswordHash
	}
	return nil
}

func (x *AuthenticationSettings) GetPasswordHashBcrypt() []byte {
	if x != nil {
		if x, ok := x.DohPasswordHash.(*AuthenticationSettings_PasswordHashBcrypt); ok {
			return x.PasswordHashBcrypt
		}
	}
	return nil
}

type isAuthenticationSettings_DohPasswordHash interface {
	isAuthenticationSettings_DohPasswordHash()
}

type AuthenticationSettings_PasswordHashBcrypt struct {
	PasswordHashBcrypt []byte `protobuf:"bytes,2,opt,name=password_hash_bcrypt,json=passwordHashBcrypt,proto3,oneof"`
}

func (*AuthenticationSettings_PasswordHashBcrypt) isAuthenticationSettings_DohPasswordHash() {}

type CreateDeviceRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DnsId         string                 `protobuf:"bytes,1,opt,name=dns_id,json=dnsId,proto3" json:"dns_id,omitempty"`
	HumanId       string                 `protobuf:"bytes,2,opt,name=human_id,json=humanId,proto3" json:"human_id,omitempty"`
	DeviceType    DeviceType             `protobuf:"varint,3,opt,name=device_type,json=deviceType,proto3,enum=DeviceType" json:"device_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateDeviceRequest) Reset() {
	*x = CreateDeviceRequest{}
	mi := &file_dns_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateDeviceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDeviceRequest) ProtoMessage() {}

func (x *CreateDeviceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dns_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDeviceRequest.ProtoReflect.Descriptor instead.
func (*CreateDeviceRequest) Descriptor() ([]byte, []int) {
	return file_dns_proto_rawDescGZIP(), []int{24}
}

func (x *CreateDeviceRequest) GetDnsId() string {
	if x != nil {
		return x.DnsId
	}
	return ""
}

func (x *CreateDeviceRequest) GetHumanId() string {
	if x != nil {
		return x.HumanId
	}
	return ""
}

func (x *CreateDeviceRequest) GetDeviceType() DeviceType {
	if x != nil {
		return x.DeviceType
	}
	return DeviceType_INVALID
}

type CreateDeviceResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Device        *DeviceSettings        `protobuf:"bytes,1,opt,name=device,proto3" json:"device,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateDeviceResponse) Reset() {
	*x = CreateDeviceResponse{}
	mi := &file_dns_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateDeviceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDeviceResponse) ProtoMessage() {}

func (x *CreateDeviceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dns_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDeviceResponse.ProtoReflect.Descriptor instead.
func (*CreateDeviceResponse) Descriptor() ([]byte, []int) {
	return file_dns_proto_rawDescGZIP(), []int{25}
}

func (x *CreateDeviceResponse) GetDevice() *DeviceSettings {
	if x != nil {
		return x.Device
	}
	return nil
}

type RateLimitedError struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Message       string                 `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	RetryDelay    *durationpb.Duration   `protobuf:"bytes,2,opt,name=retry_delay,json=retryDelay,proto3" json:"retry_delay,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RateLimitedError) Reset() {
	*x = RateLimitedError{}
	mi := &file_dns_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RateLimitedError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RateLimitedError) ProtoMessage() {}

func (x *RateLimitedError) ProtoReflect() protoreflect.Message {
	mi := &file_dns_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RateLimitedError.ProtoReflect.Descriptor instead.
func (*RateLimitedError) Descriptor() ([]byte, []int) {
	return file_dns_proto_rawDescGZIP(), []int{26}
}

func (x *RateLimitedError) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *RateLimitedError) GetRetryDelay() *durationpb.Duration {
	if x != nil {
		return x.RetryDelay
	}
	return nil
}

type DeviceQuotaExceededError struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Message       string                 `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeviceQuotaExceededError) Reset() {
	*x = DeviceQuotaExceededError{}
	mi := &file_dns_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeviceQuotaExceededError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceQuotaExceededError) ProtoMessage() {}

func (x *DeviceQuotaExceededError) ProtoReflect() protoreflect.Message {
	mi := &file_dns_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceQuotaExceededError.ProtoReflect.Descriptor instead.
func (*DeviceQuotaExceededError) Descriptor() ([]byte, []int) {
	return file_dns_proto_rawDescGZIP(), []int{27}
}

func (x *DeviceQuotaExceededError) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type BadRequestError struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Message       string                 `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BadRequestError) Reset() {
	*x = BadRequestError{}
	mi := &file_dns_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BadRequestError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BadRequestError) ProtoMessage() {}

func (x *BadRequestError) ProtoReflect() protoreflect.Message {
	mi := &file_dns_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BadRequestError.ProtoReflect.Descriptor instead.
func (*BadRequestError) Descriptor() ([]byte, []int) {
	return file_dns_proto_rawDescGZIP(), []int{28}
}

func (x *BadRequestError) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type AuthenticationFailedError struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Message       string                 `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AuthenticationFailedError) Reset() {
	*x = AuthenticationFailedError{}
	mi := &file_dns_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AuthenticationFailedError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthenticationFailedError) ProtoMessage() {}

func (x *AuthenticationFailedError) ProtoReflect() protoreflect.Message {
	mi := &file_dns_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthenticationFailedError.ProtoReflect.Descriptor instead.
func (*AuthenticationFailedError) Descriptor() ([]byte, []int) {
	return file_dns_proto_rawDescGZIP(), []int{29}
}

func (x *AuthenticationFailedError) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type NotFoundError struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Message       string                 `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NotFoundError) Reset() {
	*x = NotFoundError{}
	mi := &file_dns_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NotFoundError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotFoundError) ProtoMessage() {}

func (x *NotFoundError) ProtoReflect() protoreflect.Message {
	mi := &file_dns_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotFoundError.ProtoReflect.Descriptor instead.
func (*NotFoundError) Descriptor() ([]byte, []int) {
	return file_dns_proto_rawDescGZIP(), []int{30}
}

func (x *NotFoundError) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type RateLimitSettings struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Enabled       bool                   `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Rps           uint32                 `protobuf:"varint,2,opt,name=rps,proto3" json:"rps,omitempty"`
	ClientCidr    []*CidrRange           `protobuf:"bytes,3,rep,name=client_cidr,json=clientCidr,proto3" json:"client_cidr,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RateLimitSettings) Reset() {
	*x = RateLimitSettings{}
	mi := &file_dns_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RateLimitSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RateLimitSettings) ProtoMessage() {}

func (x *RateLimitSettings) ProtoReflect() protoreflect.Message {
	mi := &file_dns_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RateLimitSettings.ProtoReflect.Descriptor instead.
func (*RateLimitSettings) Descriptor() ([]byte, []int) {
	return file_dns_proto_rawDescGZIP(), []int{31}
}

func (x *RateLimitSettings) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *RateLimitSettings) GetRps() uint32 {
	if x != nil {
		return x.Rps
	}
	return 0
}

func (x *RateLimitSettings) GetClientCidr() []*CidrRange {
	if x != nil {
		return x.ClientCidr
	}
	return nil
}

type RemoteKVGetRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Key           string                 `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemoteKVGetRequest) Reset() {
	*x = RemoteKVGetRequest{}
	mi := &file_dns_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoteKVGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoteKVGetRequest) ProtoMessage() {}

func (x *RemoteKVGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dns_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoteKVGetRequest.ProtoReflect.Descriptor instead.
func (*RemoteKVGetRequest) Descriptor() ([]byte, []int) {
	return file_dns_proto_rawDescGZIP(), []int{32}
}

func (x *RemoteKVGetRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type RemoteKVGetResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Value:
	//
	//	*RemoteKVGetResponse_Data
	//	*RemoteKVGetResponse_Empty
	Value         isRemoteKVGetResponse_Value `protobuf_oneof:"value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemoteKVGetResponse) Reset() {
	*x = RemoteKVGetResponse{}
	mi := &file_dns_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoteKVGetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoteKVGetResponse) ProtoMessage() {}

func (x *RemoteKVGetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dns_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoteKVGetResponse.ProtoReflect.Descriptor instead.
func (*RemoteKVGetResponse) Descriptor() ([]byte, []int) {
	return file_dns_proto_rawDescGZIP(), []int{33}
}

func (x *RemoteKVGetResponse) GetValue() isRemoteKVGetResponse_Value {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *RemoteKVGetResponse) GetData() []byte {
	if x != nil {
		if x, ok := x.Value.(*RemoteKVGetResponse_Data); ok {
			return x.Data
		}
	}
	return nil
}

func (x *RemoteKVGetResponse) GetEmpty() *emptypb.Empty {
	if x != nil {
		if x, ok := x.Value.(*RemoteKVGetResponse_Empty); ok {
			return x.Empty
		}
	}
	return nil
}

type isRemoteKVGetResponse_Value interface {
	isRemoteKVGetResponse_Value()
}

type RemoteKVGetResponse_Data struct {
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3,oneof"`
}

type RemoteKVGetResponse_Empty struct {
	Empty *emptypb.Empty `protobuf:"bytes,2,opt,name=empty,proto3,oneof"`
}

func (*RemoteKVGetResponse_Data) isRemoteKVGetResponse_Value() {}

func (*RemoteKVGetResponse_Empty) isRemoteKVGetResponse_Value() {}

type RemoteKVSetRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Key           string                 `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Data          []byte                 `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	Ttl           *durationpb.Duration   `protobuf:"bytes,3,opt,name=ttl,proto3" json:"ttl,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemoteKVSetRequest) Reset() {
	*x = RemoteKVSetRequest{}
	mi := &file_dns_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoteKVSetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoteKVSetRequest) ProtoMessage() {}

func (x *RemoteKVSetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dns_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoteKVSetRequest.ProtoReflect.Descriptor instead.
func (*RemoteKVSetRequest) Descriptor() ([]byte, []int) {
	return file_dns_proto_rawDescGZIP(), []int{34}
}

func (x *RemoteKVSetRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *RemoteKVSetRequest) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *RemoteKVSetRequest) GetTtl() *durationpb.Duration {
	if x != nil {
		return x.Ttl
	}
	return nil
}

type RemoteKVSetResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemoteKVSetResponse) Reset() {
	*x = RemoteKVSetResponse{}
	mi := &file_dns_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoteKVSetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoteKVSetResponse) ProtoMessage() {}

func (x *RemoteKVSetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dns_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoteKVSetResponse.ProtoReflect.Descriptor instead.
func (*RemoteKVSetResponse) Descriptor() ([]byte, []int) {
	return file_dns_proto_rawDescGZIP(), []int{35}
}

type CustomDomainCertificateRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CertName      string                 `protobuf:"bytes,1,opt,name=cert_name,json=certName,proto3" json:"cert_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CustomDomainCertificateRequest) Reset() {
	*x = CustomDomainCertificateRequest{}
	mi := &file_dns_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CustomDomainCertificateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomDomainCertificateRequest) ProtoMessage() {}

func (x *CustomDomainCertificateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dns_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomDomainCertificateRequest.ProtoReflect.Descriptor instead.
func (*CustomDomainCertificateRequest) Descriptor() ([]byte, []int) {
	return file_dns_proto_rawDescGZIP(), []int{36}
}

func (x *CustomDomainCertificateRequest) GetCertName() string {
	if x != nil {
		return x.CertName
	}
	return ""
}

type CustomDomainCertificateResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Certificate   []byte                 `protobuf:"bytes,1,opt,name=certificate,proto3" json:"certificate,omitempty"`
	PrivateKey    []byte                 `protobuf:"bytes,2,opt,name=private_key,json=privateKey,proto3" json:"private_key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CustomDomainCertificateResponse) Reset() {
	*x = CustomDomainCertificateResponse{}
	mi := &file_dns_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CustomDomainCertificateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomDomainCertificateResponse) ProtoMessage() {}

func (x *CustomDomainCertificateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dns_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomDomainCertificateResponse.ProtoReflect.Descriptor instead.
func (*CustomDomainCertificateResponse) Descriptor() ([]byte, []int) {
	return file_dns_proto_rawDescGZIP(), []int{37}
}

func (x *CustomDomainCertificateResponse) GetCertificate() []byte {
	if x != nil {
		return x.Certificate
	}
	return nil
}

func (x *CustomDomainCertificateResponse) GetPrivateKey() []byte {
	if x != nil {
		return x.PrivateKey
	}
	return nil
}

type SessionTicketRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SessionTicketRequest) Reset() {
	*x = SessionTicketRequest{}
	mi := &file_dns_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SessionTicketRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionTicketRequest) ProtoMessage() {}

func (x *SessionTicketRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dns_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionTicketRequest.ProtoReflect.Descriptor instead.
func (*SessionTicketRequest) Descriptor() ([]byte, []int) {
	return file_dns_proto_rawDescGZIP(), []int{38}
}

type SessionTicketResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Tickets       []*SessionTicket       `protobuf:"bytes,1,rep,name=tickets,proto3" json:"tickets,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SessionTicketResponse) Reset() {
	*x = SessionTicketResponse{}
	mi := &file_dns_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SessionTicketResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionTicketResponse) ProtoMessage() {}

func (x *SessionTicketResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dns_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionTicketResponse.ProtoReflect.Descriptor instead.
func (*SessionTicketResponse) Descriptor() ([]byte, []int) {
	return file_dns_proto_rawDescGZIP(), []int{39}
}

func (x *SessionTicketResponse) GetTickets() []*SessionTicket {
	if x != nil {
		return x.Tickets
	}
	return nil
}

type SessionTicket struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Data          []byte                 `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SessionTicket) Reset() {
	*x = SessionTicket{}
	mi := &file_dns_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SessionTicket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionTicket) ProtoMessage() {}

func (x *SessionTicket) ProtoReflect() protoreflect.Message {
	mi := &file_dns_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionTicket.ProtoReflect.Descriptor instead.
func (*SessionTicket) Descriptor() ([]byte, []int) {
	return file_dns_proto_rawDescGZIP(), []int{40}
}

func (x *SessionTicket) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SessionTicket) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type DeviceSettingsChange_Deleted struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DeviceId      string                 `protobuf:"bytes,1,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeviceSettingsChange_Deleted) Reset() {
	*x = DeviceSettingsChange_Deleted{}
	mi := &file_dns_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeviceSettingsChange_Deleted) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceSettingsChange_Deleted) ProtoMessage() {}

func (x *DeviceSettingsChange_Deleted) ProtoReflect() protoreflect.Message {
	mi := &file_dns_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceSettingsChange_Deleted.ProtoReflect.Descriptor instead.
func (*DeviceSettingsChange_Deleted) Descriptor() ([]byte, []int) {
	return file_dns_proto_rawDescGZIP(), []int{6, 0}
}

func (x *DeviceSettingsChange_Deleted) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

type DeviceSettingsChange_Upserted struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Device        *DeviceSettings        `protobuf:"bytes,1,opt,name=device,proto3" json:"device,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeviceSettingsChange_Upserted) Reset() {
	*x = DeviceSettingsChange_Upserted{}
	mi := &file_dns_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeviceSettingsChange_Upserted) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceSettingsChange_Upserted) ProtoMessage() {}

func (x *DeviceSettingsChange_Upserted) ProtoReflect() protoreflect.Message {
	mi := &file_dns_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceSettingsChange_Upserted.ProtoReflect.Descriptor instead.
func (*DeviceSettingsChange_Upserted) Descriptor() ([]byte, []int) {
	return file_dns_proto_rawDescGZIP(), []int{6, 1}
}

func (x *DeviceSettingsChange_Upserted) GetDevice() *DeviceSettings {
	if x != nil {
		return x.Device
	}
	return nil
}

type CustomDomain_Pending struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	WellKnownPath string                 `protobuf:"bytes,1,opt,name=well_known_path,json=wellKnownPath,proto3" json:"well_known_path,omitempty"`
	Expire        *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=expire,proto3" json:"expire,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CustomDomain_Pending) Reset() {
	*x = CustomDomain_Pending{}
	mi := &file_dns_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CustomDomain_Pending) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomDomain_Pending) ProtoMessage() {}

func (x *CustomDomain_Pending) ProtoReflect() protoreflect.Message {
	mi := &file_dns_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomDomain_Pending.ProtoReflect.Descriptor instead.
func (*CustomDomain_Pending) Descriptor() ([]byte, []int) {
	return file_dns_proto_rawDescGZIP(), []int{8, 0}
}

func (x *CustomDomain_Pending) GetWellKnownPath() string {
	if x != nil {
		return x.WellKnownPath
	}
	return ""
}

func (x *CustomDomain_Pending) GetExpire() *timestamppb.Timestamp {
	if x != nil {
		return x.Expire
	}
	return nil
}

type CustomDomain_Current struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CertName      string                 `protobuf:"bytes,1,opt,name=cert_name,json=certName,proto3" json:"cert_name,omitempty"`
	NotBefore     *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=not_before,json=notBefore,proto3" json:"not_before,omitempty"`
	NotAfter      *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=not_after,json=notAfter,proto3" json:"not_after,omitempty"`
	Enabled       bool                   `protobuf:"varint,4,opt,name=enabled,proto3" json:"enabled,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CustomDomain_Current) Reset() {
	*x = CustomDomain_Current{}
	mi := &file_dns_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CustomDomain_Current) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomDomain_Current) ProtoMessage() {}

func (x *CustomDomain_Current) ProtoReflect() protoreflect.Message {
	mi := &file_dns_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomDomain_Current.ProtoReflect.Descriptor instead.
func (*CustomDomain_Current) Descriptor() ([]byte, []int) {
	return file_dns_proto_rawDescGZIP(), []int{8, 1}
}

func (x *CustomDomain_Current) GetCertName() string {
	if x != nil {
		return x.CertName
	}
	return ""
}

func (x *CustomDomain_Current) GetNotBefore() *timestamppb.Timestamp {
	if x != nil {
		return x.NotBefore
	}
	return nil
}

func (x *CustomDomain_Current) GetNotAfter() *timestamppb.Timestamp {
	if x != nil {
		return x.NotAfter
	}
	return nil
}

func (x *CustomDomain_Current) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

var File_dns_proto protoreflect.FileDescriptor

const file_dns_proto_rawDesc = "" +
	"\n" +
	"\tdns.proto\x1a\x1egoogle/protobuf/duration.proto\x1a\x1bgoogle/protobuf/empty.proto\x1a\x1fgoogle/protobuf/timestamp.proto\"\x1a\n" +
	"\x18RateLimitSettingsRequest\"P\n" +
	"\x19RateLimitSettingsResponse\x123\n" +
	"\x0fallowed_subnets\x18\x01 \x03(\v2\n" +
	".CidrRangeR\x0eallowedSubnets\"\x1d\n" +
	"\x1bGlobalAccessSettingsRequest\"K\n" +
	"\x1cGlobalAccessSettingsResponse\x12+\n" +
	"\bstandard\x18\x01 \x01(\v2\x0f.AccessSettingsR\bstandard\"M\n" +
	"\x12DNSProfilesRequest\x127\n" +
	"\tsync_time\x18\x01 \x01(\v2\x1a.google.protobuf.TimestampR\bsyncTime\"\xc3\n" +
	"\n" +
	"\n" +
	"DNSProfile\x12\x15\n" +
	"\x06dns_id\x18\x01 \x01(\tR\x05dnsId\x12+\n" +
	"\x11filtering_enabled\x18\x02 \x01(\bR\x10filteringEnabled\x12*\n" +
	"\x11query_log_enabled\x18\x03 \x01(\bR\x0fqueryLogEnabled\x12\x18\n" +
	"\adeleted\x18\x04 \x01(\bR\adeleted\x12:\n" +
	"\rsafe_browsing\x18\x05 \x01(\v2\x15.SafeBrowsingSettingsR\fsafeBrowsing\x12-\n" +
	"\bparental\x18\x06 \x01(\v2\x11.ParentalSettingsR\bparental\x121\n" +
	"\n" +
	"rule_lists\x18\a \x01(\v2\x12.RuleListsSettingsR\truleLists\x12)\n" +
	"\adevices\x18\b \x03(\v2\x0f.DeviceSettingsR\adevices\x12!\n" +
	"\fcustom_rules\x18\t \x03(\tR\vcustomRules\x12M\n" +
	"\x15filtered_response_ttl\x18\n" +
	" \x01(\v2\x19.google.protobuf.DurationR\x13filteredResponseTtl\x12.\n" +
	"\x13block_private_relay\x18\v \x01(\bR\x11blockPrivateRelay\x120\n" +
	"\x14block_firefox_canary\x18\f \x01(\bR\x12blockFirefoxCanary\x12N\n" +
	"\x17blocking_mode_custom_ip\x18\r \x01(\v2\x15.BlockingModeCustomIPH\x00R\x14blockingModeCustomIp\x12M\n" +
	"\x16blocking_mode_nxdomain\x18\x0e \x01(\v2\x15.BlockingModeNXDOMAINH\x00R\x14blockingModeNxdomain\x12H\n" +
	"\x15blocking_mode_null_ip\x18\x0f \x01(\v2\x13.BlockingModeNullIPH\x00R\x12blockingModeNullIp\x12J\n" +
	"\x15blocking_mode_refused\x18\x10 \x01(\v2\x14.BlockingModeREFUSEDH\x00R\x13blockingModeRefused\x12$\n" +
	"\x0eip_log_enabled\x18\x11 \x01(\bR\fipLogEnabled\x12'\n" +
	"\x06access\x18\x12 \x01(\v2\x0f.AccessSettingsR\x06access\x120\n" +
	"\x14auto_devices_enabled\x18\x13 \x01(\bR\x12autoDevicesEnabled\x121\n" +
	"\n" +
	"rate_limit\x18\x14 \x01(\v2\x12.RateLimitSettingsR\trateLimit\x122\n" +
	"\x15block_chrome_prefetch\x18\x15 \x01(\bR\x13blockChromePrefetch\x12:\n" +
	"\rcustom_domain\x18\x16 \x01(\v2\x15.CustomDomainSettingsR\fcustomDomain\x12\x1d\n" +
	"\n" +
	"account_id\x18\x17 \x01(\tR\taccountId\x12<\n" +
	"\x0edevice_changes\x18\x18 \x03(\v2\x15.DeviceSettingsChangeR\rdeviceChanges\x12G\n" +
	" standard_access_settings_enabled\x18\x19 \x01(\bR\x1dstandardAccessSettingsEnabledB\x0f\n" +
	"\rblocking_mode\"\xf6\x01\n" +
	"\x14DeviceSettingsChange\x129\n" +
	"\adeleted\x18\x01 \x01(\v2\x1d.DeviceSettingsChange.DeletedH\x00R\adeleted\x12<\n" +
	"\bupserted\x18\x02 \x01(\v2\x1e.DeviceSettingsChange.UpsertedH\x00R\bupserted\x1a&\n" +
	"\aDeleted\x12\x1b\n" +
	"\tdevice_id\x18\x01 \x01(\tR\bdeviceId\x1a3\n" +
	"\bUpserted\x12'\n" +
	"\x06device\x18\x01 \x01(\v2\x0f.DeviceSettingsR\x06deviceB\b\n" +
	"\x06change\"Y\n" +
	"\x14CustomDomainSettings\x12'\n" +
	"\adomains\x18\x01 \x03(\v2\r.CustomDomainR\adomains\x12\x18\n" +
	"\aenabled\x18\x02 \x01(\bR\aenabled\"\xb5\x03\n" +
	"\fCustomDomain\x12\x18\n" +
	"\adomains\x18\x01 \x03(\tR\adomains\x121\n" +
	"\apending\x18\x02 \x01(\v2\x15.CustomDomain.PendingH\x00R\apending\x121\n" +
	"\acurrent\x18\x03 \x01(\v2\x15.CustomDomain.CurrentH\x00R\acurrent\x1ae\n" +
	"\aPending\x12&\n" +
	"\x0fwell_known_path\x18\x01 \x01(\tR\rwellKnownPath\x122\n" +
	"\x06expire\x18\x02 \x01(\v2\x1a.google.protobuf.TimestampR\x06expire\x1a\xb4\x01\n" +
	"\aCurrent\x12\x1b\n" +
	"\tcert_name\x18\x01 \x01(\tR\bcertName\x129\n" +
	"\n" +
	"not_before\x18\x02 \x01(\v2\x1a.google.protobuf.TimestampR\tnotBefore\x127\n" +
	"\tnot_after\x18\x03 \x01(\v2\x1a.google.protobuf.TimestampR\bnotAfter\x12\x18\n" +
	"\aenabled\x18\x04 \x01(\bR\aenabledB\a\n" +
	"\x05state\"\x85\x01\n" +
	"\x14SafeBrowsingSettings\x12\x18\n" +
	"\aenabled\x18\x01 \x01(\bR\aenabled\x126\n" +
	"\x17block_dangerous_domains\x18\x02 \x01(\bR\x15blockDangerousDomains\x12\x1b\n" +
	"\tblock_nrd\x18\x03 \x01(\bR\bblockNrd\"\x8a\x02\n" +
	"\x0eDeviceSettings\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12+\n" +
	"\x11filtering_enabled\x18\x03 \x01(\bR\x10filteringEnabled\x12\x1b\n" +
	"\tlinked_ip\x18\x04 \x01(\fR\blinkedIp\x12#\n" +
	"\rdedicated_ips\x18\x05 \x03(\fR\fdedicatedIps\x12?\n" +
	"\x0eauthentication\x18\x06 \x01(\v2\x17.AuthenticationSettingsR\x0eauthentication\x12$\n" +
	"\x0ehuman_id_lower\x18\a \x01(\tR\fhumanIdLower\"\x87\x02\n" +
	"\x10ParentalSettings\x12\x18\n" +
	"\aenabled\x18\x01 \x01(\bR\aenabled\x12\x1f\n" +
	"\vblock_adult\x18\x02 \x01(\bR\n" +
	"blockAdult\x12.\n" +
	"\x13general_safe_search\x18\x03 \x01(\bR\x11generalSafeSearch\x12.\n" +
	"\x13youtube_safe_search\x18\x04 \x01(\bR\x11youtubeSafeSearch\x12)\n" +
	"\x10blocked_services\x18\x05 \x03(\tR\x0fblockedServices\x12-\n" +
	"\bschedule\x18\x06 \x01(\v2\x11.ScheduleSettingsR\bschedule\"U\n" +
	"\x10ScheduleSettings\x12\x10\n" +
	"\x03tmz\x18\x01 \x01(\tR\x03tmz\x12/\n" +
	"\fweekly_range\x18\x02 \x01(\v2\f.WeeklyRangeR\vweeklyRange\"\xd8\x01\n" +
	"\vWeeklyRange\x12\x1b\n" +
	"\x03mon\x18\x01 \x01(\v2\t.DayRangeR\x03mon\x12\x1b\n" +
	"\x03tue\x18\x02 \x01(\v2\t.DayRangeR\x03tue\x12\x1b\n" +
	"\x03wed\x18\x03 \x01(\v2\t.DayRangeR\x03wed\x12\x1b\n" +
	"\x03thu\x18\x04 \x01(\v2\t.DayRangeR\x03thu\x12\x1b\n" +
	"\x03fri\x18\x05 \x01(\v2\t.DayRangeR\x03fri\x12\x1b\n" +
	"\x03sat\x18\x06 \x01(\v2\t.DayRangeR\x03sat\x12\x1b\n" +
	"\x03sun\x18\a \x01(\v2\t.DayRangeR\x03sun\"h\n" +
	"\bDayRange\x12/\n" +
	"\x05start\x18\x01 \x01(\v2\x19.google.protobuf.DurationR\x05start\x12+\n" +
	"\x03end\x18\x02 \x01(\v2\x19.google.protobuf.DurationR\x03end\"?\n" +
	"\x11RuleListsSettings\x12\x18\n" +
	"\aenabled\x18\x01 \x01(\bR\aenabled\x12\x10\n" +
	"\x03ids\x18\x02 \x03(\tR\x03ids\">\n" +
	"\x14BlockingModeCustomIP\x12\x12\n" +
	"\x04ipv4\x18\x01 \x01(\fR\x04ipv4\x12\x12\n" +
	"\x04ipv6\x18\x02 \x01(\fR\x04ipv6\"\x16\n" +
	"\x14BlockingModeNXDOMAIN\"\x14\n" +
	"\x12BlockingModeNullIP\"\x15\n" +
	"\x13BlockingModeREFUSED\"\xe3\x01\n" +
	"\x11DeviceBillingStat\x12H\n" +
	"\x12last_activity_time\x18\x01 \x01(\v2\x1a.google.protobuf.TimestampR\x10lastActivityTime\x12\x1b\n" +
	"\tdevice_id\x18\x02 \x01(\tR\bdeviceId\x12%\n" +
	"\x0eclient_country\x18\x03 \x01(\tR\rclientCountry\x12\x14\n" +
	"\x05proto\x18\x04 \x01(\rR\x05proto\x12\x10\n" +
	"\x03asn\x18\x05 \x01(\rR\x03asn\x12\x18\n" +
	"\aqueries\x18\x06 \x01(\rR\aqueries\"\x90\x02\n" +
	"\x0eAccessSettings\x121\n" +
	"\x0eallowlist_cidr\x18\x01 \x03(\v2\n" +
	".CidrRangeR\rallowlistCidr\x121\n" +
	"\x0eblocklist_cidr\x18\x02 \x03(\v2\n" +
	".CidrRangeR\rblocklistCidr\x12#\n" +
	"\rallowlist_asn\x18\x03 \x03(\rR\fallowlistAsn\x12#\n" +
	"\rblocklist_asn\x18\x04 \x03(\rR\fblocklistAsn\x124\n" +
	"\x16blocklist_domain_rules\x18\x05 \x03(\tR\x14blocklistDomainRules\x12\x18\n" +
	"\aenabled\x18\x06 \x01(\bR\aenabled\"=\n" +
	"\tCidrRange\x12\x18\n" +
	"\aaddress\x18\x01 \x01(\fR\aaddress\x12\x16\n" +
	"\x06prefix\x18\x02 \x01(\rR\x06prefix\"\x85\x01\n" +
	"\x16AuthenticationSettings\x12\"\n" +
	"\rdoh_auth_only\x18\x01 \x01(\bR\vdohAuthOnly\x122\n" +
	"\x14password_hash_bcrypt\x18\x02 \x01(\fH\x00R\x12passwordHashBcryptB\x13\n" +
	"\x11doh_password_hash\"u\n" +
	"\x13CreateDeviceRequest\x12\x15\n" +
	"\x06dns_id\x18\x01 \x01(\tR\x05dnsId\x12\x19\n" +
	"\bhuman_id\x18\x02 \x01(\tR\ahumanId\x12,\n" +
	"\vdevice_type\x18\x03 \x01(\x0e2\v.DeviceTypeR\n" +
	"deviceType\"?\n" +
	"\x14CreateDeviceResponse\x12'\n" +
	"\x06device\x18\x01 \x01(\v2\x0f.DeviceSettingsR\x06device\"h\n" +
	"\x10RateLimitedError\x12\x18\n" +
	"\amessage\x18\x01 \x01(\tR\amessage\x12:\n" +
	"\vretry_delay\x18\x02 \x01(\v2\x19.google.protobuf.DurationR\n" +
	"retryDelay\"4\n" +
	"\x18DeviceQuotaExceededError\x12\x18\n" +
	"\amessage\x18\x01 \x01(\tR\amessage\"+\n" +
	"\x0fBadRequestError\x12\x18\n" +
	"\amessage\x18\x01 \x01(\tR\amessage\"5\n" +
	"\x19AuthenticationFailedError\x12\x18\n" +
	"\amessage\x18\x01 \x01(\tR\amessage\")\n" +
	"\rNotFoundError\x12\x18\n" +
	"\amessage\x18\x01 \x01(\tR\amessage\"l\n" +
	"\x11RateLimitSettings\x12\x18\n" +
	"\aenabled\x18\x01 \x01(\bR\aenabled\x12\x10\n" +
	"\x03rps\x18\x02 \x01(\rR\x03rps\x12+\n" +
	"\vclient_cidr\x18\x03 \x03(\v2\n" +
	".CidrRangeR\n" +
	"clientCidr\"&\n" +
	"\x12RemoteKVGetRequest\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\"d\n" +
	"\x13RemoteKVGetResponse\x12\x14\n" +
	"\x04data\x18\x01 \x01(\fH\x00R\x04data\x12.\n" +
	"\x05empty\x18\x02 \x01(\v2\x16.google.protobuf.EmptyH\x00R\x05emptyB\a\n" +
	"\x05value\"g\n" +
	"\x12RemoteKVSetRequest\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x12\n" +
	"\x04data\x18\x02 \x01(\fR\x04data\x12+\n" +
	"\x03ttl\x18\x03 \x01(\v2\x19.google.protobuf.DurationR\x03ttl\"\x15\n" +
	"\x13RemoteKVSetResponse\"=\n" +
	"\x1eCustomDomainCertificateRequest\x12\x1b\n" +
	"\tcert_name\x18\x01 \x01(\tR\bcertName\"d\n" +
	"\x1fCustomDomainCertificateResponse\x12 \n" +
	"\vcertificate\x18\x01 \x01(\fR\vcertificate\x12\x1f\n" +
	"\vprivate_key\x18\x02 \x01(\fR\n" +
	"privateKey\"\x16\n" +
	"\x14SessionTicketRequest\"A\n" +
	"\x15SessionTicketResponse\x12(\n" +
	"\atickets\x18\x01 \x03(\v2\x0e.SessionTicketR\atickets\"7\n" +
	"\rSessionTicket\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x12\n" +
	"\x04data\x18\x02 \x01(\fR\x04data*\x87\x01\n" +
	"\n" +
	"DeviceType\x12\v\n" +
	"\aINVALID\x10\x00\x12\v\n" +
	"\aWINDOWS\x10\x01\x12\v\n" +
	"\aANDROID\x10\x02\x12\a\n" +
	"\x03MAC\x10\x03\x12\a\n" +
	"\x03IOS\x10\x04\x12\t\n" +
	"\x05LINUX\x10\x05\x12\n" +
	"\n" +
	"\x06ROUTER\x10\x06\x12\f\n" +
	"\bSMART_TV\x10\a\x12\x10\n" +
	"\fGAME_CONSOLE\x10\b\x12\t\n" +
	"\x05OTHER\x10\t2\xd0\x01\n" +
	"\n" +
	"DNSService\x124\n" +
	"\x0egetDNSProfiles\x12\x13.DNSProfilesRequest\x1a\v.DNSProfile0\x01\x12F\n" +
	"\x16saveDevicesBillingStat\x12\x12.DeviceBillingStat\x1a\x16.google.protobuf.Empty(\x01\x12D\n" +
	"\x15createDeviceByHumanId\x12\x14.CreateDeviceRequest\x1a\x15.CreateDeviceResponse2\xb9\x01\n" +
	"\x10RateLimitService\x12M\n" +
	"\x14getRateLimitSettings\x12\x19.RateLimitSettingsRequest\x1a\x1a.RateLimitSettingsResponse\x12V\n" +
	"\x17getGlobalAccessSettings\x12\x1c.GlobalAccessSettingsRequest\x1a\x1d.GlobalAccessSettingsResponse2u\n" +
	"\x0fRemoteKVService\x120\n" +
	"\x03get\x12\x13.RemoteKVGetRequest\x1a\x14.RemoteKVGetResponse\x120\n" +
	"\x03set\x12\x13.RemoteKVSetRequest\x1a\x14.RemoteKVSetResponse2v\n" +
	"\x13CustomDomainService\x12_\n" +
	"\x1agetCustomDomainCertificate\x12\x1f.CustomDomainCertificateRequest\x1a .CustomDomainCertificateResponse2Z\n" +
	"\x14SessionTicketService\x12B\n" +
	"\x11getSessionTickets\x12\x15.SessionTicketRequest\x1a\x16.SessionTicketResponseb\x06proto3"

var (
	file_dns_proto_rawDescOnce sync.Once
	file_dns_proto_rawDescData []byte
)

func file_dns_proto_rawDescGZIP() []byte {
	file_dns_proto_rawDescOnce.Do(func() {
		file_dns_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_dns_proto_rawDesc), len(file_dns_proto_rawDesc)))
	})
	return file_dns_proto_rawDescData
}

var file_dns_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_dns_proto_msgTypes = make([]protoimpl.MessageInfo, 45)
var file_dns_proto_goTypes = []any{
	(DeviceType)(0),                         // 0: DeviceType
	(*RateLimitSettingsRequest)(nil),        // 1: RateLimitSettingsRequest
	(*RateLimitSettingsResponse)(nil),       // 2: RateLimitSettingsResponse
	(*GlobalAccessSettingsRequest)(nil),     // 3: GlobalAccessSettingsRequest
	(*GlobalAccessSettingsResponse)(nil),    // 4: GlobalAccessSettingsResponse
	(*DNSProfilesRequest)(nil),              // 5: DNSProfilesRequest
	(*DNSProfile)(nil),                      // 6: DNSProfile
	(*DeviceSettingsChange)(nil),            // 7: DeviceSettingsChange
	(*CustomDomainSettings)(nil),            // 8: CustomDomainSettings
	(*CustomDomain)(nil),                    // 9: CustomDomain
	(*SafeBrowsingSettings)(nil),            // 10: SafeBrowsingSettings
	(*DeviceSettings)(nil),                  // 11: DeviceSettings
	(*ParentalSettings)(nil),                // 12: ParentalSettings
	(*ScheduleSettings)(nil),                // 13: ScheduleSettings
	(*WeeklyRange)(nil),                     // 14: WeeklyRange
	(*DayRange)(nil),                        // 15: DayRange
	(*RuleListsSettings)(nil),               // 16: RuleListsSettings
	(*BlockingModeCustomIP)(nil),            // 17: BlockingModeCustomIP
	(*BlockingModeNXDOMAIN)(nil),            // 18: BlockingModeNXDOMAIN
	(*BlockingModeNullIP)(nil),              // 19: BlockingModeNullIP
	(*BlockingModeREFUSED)(nil),             // 20: BlockingModeREFUSED
	(*DeviceBillingStat)(nil),               // 21: DeviceBillingStat
	(*AccessSettings)(nil),                  // 22: AccessSettings
	(*CidrRange)(nil),                       // 23: CidrRange
	(*AuthenticationSettings)(nil),          // 24: AuthenticationSettings
	(*CreateDeviceRequest)(nil),             // 25: CreateDeviceRequest
	(*CreateDeviceResponse)(nil),            // 26: CreateDeviceResponse
	(*RateLimitedError)(nil),                // 27: RateLimitedError
	(*DeviceQuotaExceededError)(nil),        // 28: DeviceQuotaExceededError
	(*BadRequestError)(nil),                 // 29: BadRequestError
	(*AuthenticationFailedError)(nil),       // 30: AuthenticationFailedError
	(*NotFoundError)(nil),                   // 31: NotFoundError
	(*RateLimitSettings)(nil),               // 32: RateLimitSettings
	(*RemoteKVGetRequest)(nil),              // 33: RemoteKVGetRequest
	(*RemoteKVGetResponse)(nil),             // 34: RemoteKVGetResponse
	(*RemoteKVSetRequest)(nil),              // 35: RemoteKVSetRequest
	(*RemoteKVSetResponse)(nil),             // 36: RemoteKVSetResponse
	(*CustomDomainCertificateRequest)(nil),  // 37: CustomDomainCertificateRequest
	(*CustomDomainCertificateResponse)(nil), // 38: CustomDomainCertificateResponse
	(*SessionTicketRequest)(nil),            // 39: SessionTicketRequest
	(*SessionTicketResponse)(nil),           // 40: SessionTicketResponse
	(*SessionTicket)(nil),                   // 41: SessionTicket
	(*DeviceSettingsChange_Deleted)(nil),    // 42: DeviceSettingsChange.Deleted
	(*DeviceSettingsChange_Upserted)(nil),   // 43: DeviceSettingsChange.Upserted
	(*CustomDomain_Pending)(nil),            // 44: CustomDomain.Pending
	(*CustomDomain_Current)(nil),            // 45: CustomDomain.Current
	(*timestamppb.Timestamp)(nil),           // 46: google.protobuf.Timestamp
	(*durationpb.Duration)(nil),             // 47: google.protobuf.Duration
	(*emptypb.Empty)(nil),                   // 48: google.protobuf.Empty
}
var file_dns_proto_depIdxs = []int32{
	23, // 0: RateLimitSettingsResponse.allowed_subnets:type_name -> CidrRange
	22, // 1: GlobalAccessSettingsResponse.standard:type_name -> AccessSettings
	46, // 2: DNSProfilesRequest.sync_time:type_name -> google.protobuf.Timestamp
	10, // 3: DNSProfile.safe_browsing:type_name -> SafeBrowsingSettings
	12, // 4: DNSProfile.parental:type_name -> ParentalSettings
	16, // 5: DNSProfile.rule_lists:type_name -> RuleListsSettings
	11, // 6: DNSProfile.devices:type_name -> DeviceSettings
	47, // 7: DNSProfile.filtered_response_ttl:type_name -> google.protobuf.Duration
	17, // 8: DNSProfile.blocking_mode_custom_ip:type_name -> BlockingModeCustomIP
	18, // 9: DNSProfile.blocking_mode_nxdomain:type_name -> BlockingModeNXDOMAIN
	19, // 10: DNSProfile.blocking_mode_null_ip:type_name -> BlockingModeNullIP
	20, // 11: DNSProfile.blocking_mode_refused:type_name -> BlockingModeREFUSED
	22, // 12: DNSProfile.access:type_name -> AccessSettings
	32, // 13: DNSProfile.rate_limit:type_name -> RateLimitSettings
	8,  // 14: DNSProfile.custom_domain:type_name -> CustomDomainSettings
	7,  // 15: DNSProfile.device_changes:type_name -> DeviceSettingsChange
	42, // 16: DeviceSettingsChange.deleted:type_name -> DeviceSettingsChange.Deleted
	43, // 17: DeviceSettingsChange.upserted:type_name -> DeviceSettingsChange.Upserted
	9,  // 18: CustomDomainSettings.domains:type_name -> CustomDomain
	44, // 19: CustomDomain.pending:type_name -> CustomDomain.Pending
	45, // 20: CustomDomain.current:type_name -> CustomDomain.Current
	24, // 21: DeviceSettings.authentication:type_name -> AuthenticationSettings
	13, // 22: ParentalSettings.schedule:type_name -> ScheduleSettings
	14, // 23: ScheduleSettings.weekly_range:type_name -> WeeklyRange
	15, // 24: WeeklyRange.mon:type_name -> DayRange
	15, // 25: WeeklyRange.tue:type_name -> DayRange
	15, // 26: WeeklyRange.wed:type_name -> DayRange
	15, // 27: WeeklyRange.thu:type_name -> DayRange
	15, // 28: WeeklyRange.fri:type_name -> DayRange
	15, // 29: WeeklyRange.sat:type_name -> DayRange
	15, // 30: WeeklyRange.sun:type_name -> DayRange
	47, // 31: DayRange.start:type_name -> google.protobuf.Duration
	47, // 32: DayRange.end:type_name -> google.protobuf.Duration
	46, // 33: DeviceBillingStat.last_activity_time:type_name -> google.protobuf.Timestamp
	23, // 34: AccessSettings.allowlist_cidr:type_name -> CidrRange
	23, // 35: AccessSettings.blocklist_cidr:type_name -> CidrRange
	0,  // 36: CreateDeviceRequest.device_type:type_name -> DeviceType
	11, // 37: CreateDeviceResponse.device:type_name -> DeviceSettings
	47, // 38: RateLimitedError.retry_delay:type_name -> google.protobuf.Duration
	23, // 39: RateLimitSettings.client_cidr:type_name -> CidrRange
	48, // 40: RemoteKVGetResponse.empty:type_name -> google.protobuf.Empty
	47, // 41: RemoteKVSetRequest.ttl:type_name -> google.protobuf.Duration
	41, // 42: SessionTicketResponse.tickets:type_name -> SessionTicket
	11, // 43: DeviceSettingsChange.Upserted.device:type_name -> DeviceSettings
	46, // 44: CustomDomain.Pending.expire:type_name -> google.protobuf.Timestamp
	46, // 45: CustomDomain.Current.not_before:type_name -> google.protobuf.Timestamp
	46, // 46: CustomDomain.Current.not_after:type_name -> google.protobuf.Timestamp
	5,  // 47: DNSService.getDNSProfiles:input_type -> DNSProfilesRequest
	21, // 48: DNSService.saveDevicesBillingStat:input_type -> DeviceBillingStat
	25, // 49: DNSService.createDeviceByHumanId:input_type -> CreateDeviceRequest
	1,  // 50: RateLimitService.getRateLimitSettings:input_type -> RateLimitSettingsRequest
	3,  // 51: RateLimitService.getGlobalAccessSettings:input_type -> GlobalAccessSettingsRequest
	33, // 52: RemoteKVService.get:input_type -> RemoteKVGetRequest
	35, // 53: RemoteKVService.set:input_type -> RemoteKVSetRequest
	37, // 54: CustomDomainService.getCustomDomainCertificate:input_type -> CustomDomainCertificateRequest
	39, // 55: SessionTicketService.getSessionTickets:input_type -> SessionTicketRequest
	6,  // 56: DNSService.getDNSProfiles:output_type -> DNSProfile
	48, // 57: DNSService.saveDevicesBillingStat:output_type -> google.protobuf.Empty
	26, // 58: DNSService.createDeviceByHumanId:output_type -> CreateDeviceResponse
	2,  // 59: RateLimitService.getRateLimitSettings:output_type -> RateLimitSettingsResponse
	4,  // 60: RateLimitService.getGlobalAccessSettings:output_type -> GlobalAccessSettingsResponse
	34, // 61: RemoteKVService.get:output_type -> RemoteKVGetResponse
	36, // 62: RemoteKVService.set:output_type -> RemoteKVSetResponse
	38, // 63: CustomDomainService.getCustomDomainCertificate:output_type -> CustomDomainCertificateResponse
	40, // 64: SessionTicketService.getSessionTickets:output_type -> SessionTicketResponse
	56, // [56:65] is the sub-list for method output_type
	47, // [47:56] is the sub-list for method input_type
	47, // [47:47] is the sub-list for extension type_name
	47, // [47:47] is the sub-list for extension extendee
	0,  // [0:47] is the sub-list for field type_name
}

func init() { file_dns_proto_init() }
func file_dns_proto_init() {
	if File_dns_proto != nil {
		return
	}
	file_dns_proto_msgTypes[5].OneofWrappers = []any{
		(*DNSProfile_BlockingModeCustomIp)(nil),
		(*DNSProfile_BlockingModeNxdomain)(nil),
		(*DNSProfile_BlockingModeNullIp)(nil),
		(*DNSProfile_BlockingModeRefused)(nil),
	}
	file_dns_proto_msgTypes[6].OneofWrappers = []any{
		(*DeviceSettingsChange_Deleted_)(nil),
		(*DeviceSettingsChange_Upserted_)(nil),
	}
	file_dns_proto_msgTypes[8].OneofWrappers = []any{
		(*CustomDomain_Pending_)(nil),
		(*CustomDomain_Current_)(nil),
	}
	file_dns_proto_msgTypes[23].OneofWrappers = []any{
		(*AuthenticationSettings_PasswordHashBcrypt)(nil),
	}
	file_dns_proto_msgTypes[33].OneofWrappers = []any{
		(*RemoteKVGetResponse_Data)(nil),
		(*RemoteKVGetResponse_Empty)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_dns_proto_rawDesc), len(file_dns_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   45,
			NumExtensions: 0,
			NumServices:   5,
		},
		GoTypes:           file_dns_proto_goTypes,
		DependencyIndexes: file_dns_proto_depIdxs,
		EnumInfos:         file_dns_proto_enumTypes,
		MessageInfos:      file_dns_proto_msgTypes,
	}.Build()
	File_dns_proto = out.File
	file_dns_proto_goTypes = nil
	file_dns_proto_depIdxs = nil
}
